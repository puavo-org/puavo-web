// All available columns, their names and types and other parameters
const COLUMN_DEFINITIONS = {
    id: {
        key: "id",
        type: ColumnType.NUMERIC,
        alias: ["puavoid"],
    },

    first: {
        key: "first",
        type: ColumnType.STRING,
        alias: ["first_name", "fn"],
    },

    last: {
        key: "last",
        type: ColumnType.STRING,
        alias: ["last_name", "ln"],
    },

    name: {
        key: "name",
        type: ColumnType.STRING,
        flags: ColumnFlag.USER_TRANSFORM,
    },

    uid: {
        key: "uid",
        type: ColumnType.STRING,
        alias: ["username"],
    },

    eid: {
        key: "eid",
        type: ColumnType.STRING,
        flags: ColumnFlag.F_NULLABLE,
        alias: ["external_id"]
    },

    learner_id: {
        key: "learner_id",
        type: ColumnType.STRING,
        flags: ColumnFlag.F_NULLABLE,
        alias: ["lid"],
    },

    role: {
        key: "role",
        type: ColumnType.STRING,
        flags: ColumnFlag.USER_TRANSFORM,
    },

    phone: {
        key: "phone",
        type: ColumnType.STRING,
        flags: ColumnFlag.ARRAY | ColumnFlag.F_NULLABLE,
        alias: ["phone_number"],
    },

    email: {
        key: "email",
        type: ColumnType.STRING,
        flags: ColumnFlag.ARRAY | ColumnFlag.F_NULLABLE,
    },

    pnumber: {
        key: "pnumber",
        type: ColumnType.STRING,
    },

    home: {
        key: "home",
        type: ColumnType.STRING,
    },

    rrt: {
        key: "rrt",
        type: ColumnType.UNIXTIME,
        flags: ColumnFlag.USER_TRANSFORM | ColumnFlag.F_NULLABLE,
        alias: ["removal_request_time"]
    },

    dnd: {
        key: "dnd",
        type: ColumnType.BOOL,
        flags: ColumnFlag.F_NULLABLE,
        alias: ["do_not_delete"]
    },

    locked: {
        key: "locked",
        type: ColumnType.BOOL,
        flags: ColumnFlag.F_NULLABLE,
    },

    created: {
        key: "created",
        type: ColumnType.UNIXTIME,
        flags: ColumnFlag.DESCENDING_DEFAULT,
    },

    modified: {
        key: "modified",
        type: ColumnType.UNIXTIME,
        flags: ColumnFlag.DESCENDING_DEFAULT,
    },

<% if @is_organisation %>
    school: {
        key: "school",
        type: ColumnType.STRING,
        flags: ColumnFlag.USER_TRANSFORM,
    },
<% end %>

    schools: {
        key: "schools",
        type: ColumnType.STRING,
        flags: ColumnFlag.USER_TRANSFORM,
    },
};

// Localized column titles. The keys must be same as in the keys in the column
// definitions object above.
const COLUMN_TITLES = {
    id: "<%= t('columns.puavoid') %>",
    first: "<%= t('columns.users.first_names') %>",
    last: "<%= t('columns.users.last_name') %>",
    name: "<%= t('columns.users.full_name') %>",
    uid: "<%= t('columns.users.uid') %>",
    eid: "<%= t('columns.users.eid') %>",
    learner_id: "<%= t('columns.users.learner_id') %>",
    role: "<%= t('columns.users.role') %>",
    phone: "<%= t('columns.users.phone') %>",
    email: "<%= t('columns.users.email') %>",
    pnumber: "<%= t('columns.users.pnumber') %>",
    home: "<%= t('columns.users.home_dir') %>",
    rrt: "<%= t('columns.users.rrt') %>",
    dnd: "<%= t('columns.users.dnd') %>",
    locked: "<%= t('columns.users.is_locked') %>",
    created: "<%= t('columns.created') %>",
    modified: "<%= t('columns.modified') %>",
    school: "<%= t('columns.primary_school') %>",
    schools: "<%= t('columns.users.other_schools') %>",
};

// The default order for columns
const COLUMN_ORDER = [
<% if @is_organisation %>
    "school",
<% end %>
    "schools",
    "id",
    "name",
    "first",
    "last",
    "uid",
    "role",
    "eid",
    "learner_id",
    "phone",
    "email",
    "pnumber",
    "home",
    "rrt",
    "dnd",
    "locked",
    "created",
    "modified",
];

// Localized user role names
const USER_ROLES = {
    owner: "<%= t('organisation_owner_role') %>",
    schooladmin: "<%= t('school_admin_role') %>",
    admin: "<%= t('puavoEduPersonAffiliation_admin') %>",
    teacher: "<%= t('puavoEduPersonAffiliation_teacher') %>",
    student: "<%= t('puavoEduPersonAffiliation_student') %>",
    staff: "<%= t('puavoEduPersonAffiliation_staff') %>",
    testuser: "<%= t('puavoEduPersonAffiliation_testuser') %>",
    parent: "<%= t('puavoEduPersonAffiliation_parent') %>",
    visitor: "<%= t('puavoEduPersonAffiliation_visitor') %>",
    unknown: "<%= t('unknown_role') %>",
};

const SCHOOLS = {
<% @schools_list.each do |s| %>
    "<%= s[:id] %>": {
        dn: "<%= s[:dn] %>",
        name: "<%= s[:name] %>",
    },
<% end %>
};

/*
Each transformation function must return an array of two values:
    1. The displayable value for this table cell. Assumed to be valid HTML.
    2. A plain entry that can be used to compare this to other cells during sorting.

Never return NULLs! If there is no value, return the default value for that
cell, be it an empty string, the number zero, or something else. Never NULL.
*/
const USER_TRANSFORM_FUNCTIONS = {
    name: function(entry) {
        let s = "";

        if (entry.rrt)
            s += `<span class="stUserMarkedForDeletion">`;

        s += `<a href="${entry.link}">${escapeHTML(entry.name)}</a>`;

        if (entry.locked)
            s += `<i class="icon-lock"></i>`;

        if (entry.rrt)
            s += `</span>`;

        return [
            s,
            entry.name
        ];
    },

    rrt: function(entry) {
        if (entry.rrt === undefined || entry.rrt === null || entry.rrt === 0)
            return ["", 0];

        const [valid, t] = convertTimestamp(entry.rrt);

        if (!valid)
            return ["?", 0];

        return [t, entry.rrt];
    },

    role: function(entry) {
        let values = [];

        // Translate user roles
        for (let i = 0; i < entry.role.length; i++) {
            const r = entry.role[i];

            if (r in USER_ROLES) {
                if (r == "owner" || r == "schooladmin")
                    values.push(`<span class="stAdmin">${USER_ROLES[r]}</span>`);
                else values.push(USER_ROLES[r]);
            } else values.push(USER_ROLES['unknown']);
        }

        return [
            values.join("<br>"),
            entry.role.join()
        ];
    },

    school: function(entry) {
        // Makes filtering by school name work as expected, but the exported CSV
        // will contain display names. Can't have everything.
        return [
            entry.school[1],
            entry.school[1]
        ];
    },

    schools: function(entry) {
        let out = [];

        if (Array.isArray(entry.schools))
            for (const id of entry.schools)
                out.push((id in SCHOOLS) ? SCHOOLS[id].name : "?");

        return [out.join("<br>"), out.join(","), out.join(",")];
    },
};

<% if @is_owner %>
class MassUserDeletion extends MassOperation {
    constructor(parent, container)
    {
        super(parent, container);
    }

    canProceed()
    {
        // Show an extra warning if there are synchronised deletions
        if (Object.keys(SYNC_DELETIONS).length == 0)
            return true;

        return window.confirm(`<%= t('destroy_generic_sync_warning') %>`);
    }

    start()
    {
    }

    finish()
    {
    }

    processItem(item)
    {
        // Do some pre-filtering here, to prevent useless network traffic.
        // All of these tests are also done on the server end in case the
        // user tries to cheat by, for example, adjusting their system time.
        const dnd = item.dnd[INDEX_EXISTS] === true && item.dnd[INDEX_FILTERABLE] !== undefined,
              marked = item.rrt[INDEX_EXISTS] === true && item.rrt[INDEX_FILTERABLE] !== undefined,
              locked = item.locked[INDEX_EXISTS] === true && item.locked[INDEX_FILTERABLE] === true;

        if (dnd)
            return itemProcessedStatus(false, "<%= t('users.index.mass_operations.delete.deletion_prevented') %>");

        if (!marked)
            return itemProcessedStatus(false, "<%= t('users.index.mass_operations.delete.not_marked_for_deletion') %>");

        const now = Math.floor(Date.now() / 1000);
        const next = item.rrt[INDEX_FILTERABLE] + (60 * 60 * 24 * 7);   // 7 days in seconds

        if (next > now)
            return itemProcessedStatus(false, "<%= t('users.index.mass_operations.delete.marked_too_recently') %>");

        // Good to go
        return doPOST(
            `/users/${item.school_id}/mass_op_user_delete`,
            { id: item.id[INDEX_FILTERABLE] }
        );
    }
};
<% end %>

class MassUserLocking extends MassOperation {
    constructor(parent, container)
    {
        super(parent, container);

        // The default state (lock)
        this.lock = true;
    }

    buildInterface()
    {
        this.container.innerHTML =
`<form>
<table class="settingsChild">
<tr>
    <th><%= t('users.index.mass_operations.lock.action') %></th>
    <td>
        <input type="radio" name="mul_action_type" id="mul_action_lock" checked>
        <label for="mul_action_lock"><%= t('users.index.mass_operations.lock.lock') %></label><br>
        <input type="radio" name="mul_action_type" id="mul_action_unlock">
        <label for="mul_action_unlock"><%= t('users.index.mass_operations.lock.unlock') %></label>
    </td>
</tr>
</table>
</form>`;

        this.container.querySelector("#mul_action_lock")
            .addEventListener("click", event => this.setLockState(event, true));
        this.container.querySelector("#mul_action_unlock")
            .addEventListener("click", event => this.setLockState(event, false));
    }

    start()
    {
        this.container.querySelector("#mul_action_lock").disabled = true;
        this.container.querySelector("#mul_action_unlock").disabled = true;
    }

    finish()
    {
        this.container.querySelector("#mul_action_lock").disabled = false;
        this.container.querySelector("#mul_action_unlock").disabled = false;
    }

    processItem(item)
    {
        // Do nothing if the user is already in the desired locking state
        if (item.locked[INDEX_EXISTS] === true && item.locked[INDEX_FILTERABLE] === this.lock) {
            console.log("already in the desired state");
            return itemProcessedStatus(true);
        }

        return doPOST(
            `/users/${item.school_id}/mass_op_user_lock`,
            { id: item.id[1], lock: this.lock }
        );
    }

    setLockState(event, state)
    {
        this.lock = state;
    }
};

class MassUserMarkForDeletion extends MassOperation {
    constructor(parent, container)
    {
        super(parent, container);

        // The default operation (mark for deletion if not marked yet)
        this.operation = 0;
    }

    buildInterface()
    {
        this.container.innerHTML =
`<form>
<table class="settingsChild">
<tr>
    <th><%= t('users.index.mass_operations.mark.action') %></th>
    <td>
        <input type="radio" name="mass_user_mark_action" id="mass_user_mark_mark" checked>
        <label for="mass_user_mark_mark"><%= t('users.index.mass_operations.mark.mark') %></label><br>
        <input type="radio" name="mass_user_mark_action" id="mass_user_mark_mark_force">
        <label for="mass_user_mark_mark_force"><%= t('users.index.mass_operations.mark.mark_force') %></label><br>
        <input type="radio" name="mass_user_mark_action" id="mass_user_mark_unmark">
        <label for="mass_user_mark_unmark"><%= t('users.index.mass_operations.mark.unmark') %></label>
    </td>
</tr>
</table>
</form>`;

        this.container.querySelector("#mass_user_mark_mark")
            .addEventListener("click", event => this.setOperation(event, 0));
        this.container.querySelector("#mass_user_mark_mark_force")
            .addEventListener("click", event => this.setOperation(event, 1));
        this.container.querySelector("#mass_user_mark_unmark")
            .addEventListener("click", event => this.setOperation(event, 2));
    }

    setOperation(event, op)
    {
        this.operation = op;
    }

    start()
    {
        this.container.querySelector("#mass_user_mark_mark").disabled = true;
        this.container.querySelector("#mass_user_mark_mark_force").disabled = true;
        this.container.querySelector("#mass_user_mark_unmark").disabled = true;
    }

    finish()
    {
        this.container.querySelector("#mass_user_mark_mark").disabled = false;
        this.container.querySelector("#mass_user_mark_mark_force").disabled = false;
        this.container.querySelector("#mass_user_mark_unmark").disabled = false;
    }

    processItem(item)
    {
        // Pre-filter users, avoid useless network requests. All of these checks
        // are also done on the server end.
        const dnd = item.dnd[INDEX_EXISTS] === true && item.dnd[INDEX_FILTERABLE] !== undefined,
              marked = item.rrt[INDEX_EXISTS] === true && item.rrt[INDEX_FILTERABLE] !== undefined;

        if (dnd) {
            // deletion prevented
            return itemProcessedStatus(false, "<%= t('users.index.mass_operations.delete.deletion_prevented') %>");
        }

        if (marked && this.operation == 0) {
            // Already marked for deletion and not in force mode
            return itemProcessedStatus(true);
        }

        if (!marked && this.operation == 2) {
            // Not marked for deletion
            return itemProcessedStatus(true);
        }

        return doPOST(
            `/users/${item.school_id}/mass_op_user_mark`,
            { id: item.id[INDEX_FILTERABLE], operation: this.operation }
        );
    }
};

class MassUserClearColumn extends MassOperation {
    constructor(parent, container)
    {
        super(parent, container);
    }

    buildInterface()
    {
        this.container.innerHTML =
`<form>
<table class="settingsChild">
<tr>
    <th><%= t('users.index.mass_operations.clear_column.column_title') %></th>
    <td>
        <input type="radio" name="mass_user_clear_column" id="mass_user_clear_column_eid" checked>
        <label for="mass_user_clear_column_eid"><%= t('users.index.mass_operations.clear_column.columns.eid') %></label><br>
<% unless @automatic_email_addresses %>
        <input type="radio" name="mass_user_clear_column" id="mass_user_clear_column_email">
        <label for="mass_user_clear_column_email"><%= t('users.index.mass_operations.clear_column.columns.email') %></label><br>
<% end %>
        <input type="radio" name="mass_user_clear_column" id="mass_user_clear_column_telephone">
        <label for="mass_user_clear_column_telephone"><%= t('users.index.mass_operations.clear_column.columns.telephone') %></label><br>
        <input type="radio" name="mass_user_clear_column" id="mass_user_clear_column_learner_id">
        <label for="mass_user_clear_column_learner_id"><%= t('users.index.mass_operations.clear_column.columns.learner_id') %></label><br>
        <input type="radio" name="mass_user_clear_column" id="mass_user_clear_column_pnumber">
        <label for="mass_user_clear_column_pnumber"><%= t('users.index.mass_operations.clear_column.columns.pnumber') %></label>
    </td>
</tr>
</table>
</form>`;

        this.column = "eid";

        this.container.querySelector("#mass_user_clear_column_eid")
            .addEventListener("click", event => this.setColumn(event, "eid"));
<% unless @automatic_email_addresses %>
        this.container.querySelector("#mass_user_clear_column_email")
            .addEventListener("click", event => this.setColumn(event, "email"));
<% end %>
        this.container.querySelector("#mass_user_clear_column_telephone")
            .addEventListener("click", event => this.setColumn(event, "telephone"));
        this.container.querySelector("#mass_user_clear_column_learner_id")
            .addEventListener("click", event => this.setColumn(event, "learner_id"));
        this.container.querySelector("#mass_user_clear_column_pnumber")
            .addEventListener("click", event => this.setColumn(event, "pnumber"));
    }

    setColumn(event, col)
    {
        this.column = col;
    }

    processItem(item)
    {
        return doPOST(
            `/users/${item.school_id}/mass_op_user_clear_column`,
            { id: item.id[INDEX_FILTERABLE], column: this.column }
        );
    }
};

<% unless @is_organisation %>
class MassUsernameList extends MassOperation {
    constructor(parent, container)
    {
        super(parent, container);
    }

    processAllItems(items)
    {
        // PuavoIDs are enough for the server
        let id = [];

        for (const i of items)
            id.push(i[0].id[INDEX_FILTERABLE]);

        return doPOST(
            "/users/<%= @school.id %>/mass_op_username_list",
            { user_ids: id, creator: "<%= current_user.uid %>" }
        );
    }
};
<% end %>

const MASS_OPERATIONS = [
<% if @is_owner %>
    {
        id: "delete",
        title: "<%= t('users.index.mass_operations.delete.title') %>",
        //flags: MassOperationFlags.HAVE_SETTINGS,
        cls: MassUserDeletion,
    },
<% end %>

    {
        id: "lock",
        title: "<%= t('users.index.mass_operations.lock.title') %>",
        flags: MassOperationFlags.HAVE_SETTINGS,
        cls: MassUserLocking
    },

    {
        id: "mark_for_deletion",
        title: "<%= t('users.index.mass_operations.mark.title') %>",
        flags: MassOperationFlags.HAVE_SETTINGS,
        cls: MassUserMarkForDeletion
    },

    {
        id: "clear_columm",
        title: "<%= t('users.index.mass_operations.clear_column.title') %>",
        flags: MassOperationFlags.HAVE_SETTINGS,
        cls: MassUserClearColumn
    },

<% unless @is_organisation %>
    {
        id: "create_username_list",
        title: "<%= t('users.index.mass_operations.username_list.title') %>",
        flags: MassOperationFlags.SINGLESHOT,
        cls: MassUsernameList
    },
<% end %>
];

const FILTER_PRESETS = [
    // Traditional
    {
        smoketest_users: {
            title: "<%= t('users.index.filters.smoketest_users') %>",
            filters: [
                [1,"uid","=","^test.user.[0-9a-fA-F]+$"]
            ],
        },

        locked: {
            title: "<%= t('users.index.filters.locked_users') %>",
            filters: [
                [1,"locked","=","1"]
            ],
        },

        marked_for_deletion: {
            title: "<%= t('users.index.filters.marked_for_deletion') %>",
            filters: [
                [1,"rrt",">=","2010-01-01 00:00:00"]
            ],
        },

        unlocked_deleted: {
            title: "<%= t('users.index.filters.marked_for_deletion_not_locked') %>",
            filters: [
                [1,"locked","!=","1"],
                [1,"rrt",">=","2010-01-01 00:00:00"],
                [0,"eid","=","^$"]
            ],
        },

        marked_for_3months: {
            title: "<%= t('users.index.filters.marked_3months') %>",
            filters: [
                [1,"rrt","<","-90d"],
                [0,"eid","=",""]
            ],
        },

        marked_for_6months: {
            title: "<%= t('users.index.filters.marked_6months') %>",
            filters: [
                [1,"rrt","<","-180d"],
                [0,"eid","=",""]
            ],
        },

        marked_for_9months: {
            title: "<%= t('users.index.filters.marked_9months') %>",
            filters: [
                [1,"rrt","<","-270d"],
                [0,"eid","=",""]
            ],
        },

        marked_for_12months: {
            title: "<%= t('users.index.filters.marked_12months') %>",
            filters: [
                [1,"rrt","<","-365d"],
                [0,"eid","=",""]
            ],
        },

        short_uids: {
            title: "<%= t('users.index.filters.short_uids') %>",
            filters: [
                [1,"uid","=","^[a-z0-9-.]{1,5}$"]
            ],
        }
    },

    // Advanced
    {
        marked_for_3months: {
            title: "<%= t('users.index.filters.marked_3months') %>",
            filter: `rrt !! t && rrt < -90d`,
        },

        marked_for_6months: {
            title: "<%= t('users.index.filters.marked_6months') %>",
            filter: `rrt !! t && rrt < -180d`,
        },

        marked_for_9months: {
            title: "<%= t('users.index.filters.marked_9months') %>",
            filter: `rrt !! t && rrt < -270d`,
        },

        marked_for_12months: {
            title: "<%= t('users.index.filters.marked_12months') %>",
            filter: `rrt !! t && rrt < -365d`,
        },

        smoketest_users: {
            title: "<%= t('users.index.filters.smoketest_users') %>",
            filter: `uid = /^test.user.[0-9a-fA-F]+$/`,
        },

        locked: {
            title: "<%= t('users.index.filters.locked_users') %>",
            filter: `locked !! t && locked = t`,
        },

        marked_for_deletion_not_locked: {
            title: "<%= t('users.index.filters.marked_for_deletion_not_locked') %>",
            filter: `rrt !! t && rrt > 2010 && locked == f`,
        },

        short_uids: {
            title: "<%= t('users.index.filters.short_uids') %>",
            filter: `uid = /^[a-z0-9-.]{1,5}$/`,
        }
    }
];

const SYNC_DELETIONS = <%= raw JSON.pretty_generate(@synchronised_deletions) %>;

function userActions(item)
{
    let html = "";

    const link = `/users/${item.school_id}/users/${item.id[INDEX_FILTERABLE]}`;
    const dnd = item.dnd[INDEX_EXISTS] === true && item.dnd[INDEX_FILTERABLE] !== undefined;

    html += `<a href="${link}/edit" class="btn"><%= t('link.edit') %></a> `;

    if (!dnd) {
<% if @is_owner || @permit_single_user_deletion %>
        let isAdmin = false,
            message = null;

        // Extra warning when deleting owners/admins
        for (let t of item.role[1].split(",")) {
            if (t == "owner" || t == "admin") {
                isAdmin = true;
                break;
            }
        }

        if (isAdmin)
            message = "<%= t('destroy_confirm_admin') %>";
        else message = "<%= t('general_confirm') %>";

        const school_id = item.school_id;

        if (school_id in SYNC_DELETIONS && SYNC_DELETIONS[school_id].length > 0) {
            // Extra warning about deletion synchronisations. "SYSTEM_NAMES_HERE" is the only
            // placeholder I could came up with to stop JavaScript's string interpolation from
            // throwing up because it couldn't find the placeholder. I tried ${name}, $(name)
            // and a bunch of others. Of course it attempted to process them all. I need to
            // use `` for the string because it's the only way to have multiline strings in
            // JavaScript.
            message += "\n\n";
            message += `<%= t('destroy_exact_sync_warning') %>`
                       .replace("SYSTEM_NAMES_HERE", SYNC_DELETIONS[school_id].join(", "));
        }

        html += `<a href="${link}" data-method="delete" data-confirm="${message}" rel="nofollow" class="btn btn-danger"><%= t('link.destroy') %></a>`
<% end %>
    }

    return html;
}

function openCallback(item)
{
    return `/users/${item.school_id}/users/${item.id[INDEX_DISPLAYABLE]}`;
}

const MASS_SELECTS = [
    ["uid", "<%= t('columns.users.uid') %>"],
    ["name", "<%= t('columns.users.full_name') %>"],
    ["eid", "<%= t('columns.users.eid') %>"],
    ["id", "<%= t('columns.puavoid') %>"],
];
