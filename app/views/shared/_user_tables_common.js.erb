// All available columns, their names and types and other parameters
const COLUMN_DEFINITIONS = {
    id: {
        key: "id",
        type: ST.ColumnType.NUMERIC,
        alias: ["puavoid"],
    },

    first: {
        key: "first",
        type: ST.ColumnType.STRING,
        alias: ["first_name", "fn"],
    },

    last: {
        key: "last",
        type: ST.ColumnType.STRING,
        alias: ["last_name", "ln"],
    },

    name: {
        key: "name",
        type: ST.ColumnType.STRING,
        flags: ST.ColumnFlag.USER_TRANSFORM,
    },

    uid: {
        key: "uid",
        type: ST.ColumnType.STRING,
        alias: ["username"],
    },

    eid: {
        key: "eid",
        type: ST.ColumnType.STRING,
        flags: ST.ColumnFlag.F_NULLABLE,
        alias: ["external_id"]
    },

    learner_id: {
        key: "learner_id",
        type: ST.ColumnType.STRING,
        flags: ST.ColumnFlag.F_NULLABLE,
        alias: ["lid"],
    },

    role: {
        key: "role",
        type: ST.ColumnType.STRING,
        flags: ST.ColumnFlag.USER_TRANSFORM,
    },

    phone: {
        key: "phone",
        type: ST.ColumnType.STRING,
        flags: ST.ColumnFlag.ARRAY | ST.ColumnFlag.F_NULLABLE,
        alias: ["phone_number"],
    },

    email: {
        key: "email",
        type: ST.ColumnType.STRING,
        flags: ST.ColumnFlag.ARRAY | ST.ColumnFlag.F_NULLABLE,
    },

    pnumber: {
        key: "pnumber",
        type: ST.ColumnType.STRING,
    },

    home: {
        key: "home",
        type: ST.ColumnType.STRING,
    },

    rrt: {
        key: "rrt",
        type: ST.ColumnType.UNIXTIME,
        flags: ST.ColumnFlag.USER_TRANSFORM | ST.ColumnFlag.F_NULLABLE,
        alias: ["removal_request_time"]
    },

    dnd: {
        key: "dnd",
        type: ST.ColumnType.BOOL,
        flags: ST.ColumnFlag.F_NULLABLE,
        alias: ["do_not_delete"]
    },

    locked: {
        key: "locked",
        type: ST.ColumnType.BOOL,
        flags: ST.ColumnFlag.F_NULLABLE,
    },

    created: {
        key: "created",
        type: ST.ColumnType.UNIXTIME,
        flags: ST.ColumnFlag.DESCENDING_DEFAULT,
    },

    modified: {
        key: "modified",
        type: ST.ColumnType.UNIXTIME,
        flags: ST.ColumnFlag.DESCENDING_DEFAULT,
    },

<% if @is_organisation %>
    school: {
        key: "school",
        type: ST.ColumnType.STRING,
        flags: ST.ColumnFlag.USER_TRANSFORM,
    },
<% end %>

    schools: {
        key: "schools",
        type: ST.ColumnType.STRING,
        flags: ST.ColumnFlag.USER_TRANSFORM,
    },
};

// Localized column titles. The keys must be same as in the keys in the column
// definitions object above.
const COLUMN_TITLES = {
    id: "<%= t('columns.puavoid') %>",
    first: "<%= t('columns.users.first_names') %>",
    last: "<%= t('columns.users.last_name') %>",
    name: "<%= t('columns.users.full_name') %>",
    uid: "<%= t('columns.users.uid') %>",
    eid: "<%= t('columns.users.eid') %>",
    learner_id: "<%= t('columns.users.learner_id') %>",
    role: "<%= t('columns.users.role') %>",
    phone: "<%= t('columns.users.phone') %>",
    email: "<%= t('columns.users.email') %>",
    pnumber: "<%= t('columns.users.pnumber') %>",
    home: "<%= t('columns.users.home_dir') %>",
    rrt: "<%= t('columns.users.rrt') %>",
    dnd: "<%= t('columns.users.dnd') %>",
    locked: "<%= t('columns.users.is_locked') %>",
    created: "<%= t('columns.created') %>",
    modified: "<%= t('columns.modified') %>",
    school: "<%= t('columns.primary_school') %>",
    schools: "<%= t('columns.users.other_schools') %>",
};

// The default order for columns
const COLUMN_ORDER = [
<% if @is_organisation %>
    "school",
<% end %>
    "schools",
    "id",
    "name",
    "first",
    "last",
    "uid",
    "role",
    "eid",
    "learner_id",
    "phone",
    "email",
    "pnumber",
    "home",
    "rrt",
    "dnd",
    "locked",
    "created",
    "modified",
];

// Localized user role names
const USER_ROLES = {
    owner: "<%= t('organisation_owner_role') %>",
    schooladmin: "<%= t('school_admin_role') %>",
    admin: "<%= t('puavoEduPersonAffiliation_admin') %>",
    teacher: "<%= t('puavoEduPersonAffiliation_teacher') %>",
    student: "<%= t('puavoEduPersonAffiliation_student') %>",
    staff: "<%= t('puavoEduPersonAffiliation_staff') %>",
    testuser: "<%= t('puavoEduPersonAffiliation_testuser') %>",
    parent: "<%= t('puavoEduPersonAffiliation_parent') %>",
    visitor: "<%= t('puavoEduPersonAffiliation_visitor') %>",
    unknown: "<%= t('unknown_role') %>",
};

const SCHOOLS = {
<% @schools_list.each do |s| %>
    "<%= s[:id] %>": {
        dn: "<%= s[:dn] %>",
        name: "<%= s[:name] %>",
    },
<% end %>
};

/*
Each transformation function must return an array of two values:
    1. The displayable value for this table cell. Assumed to be valid HTML.
    2. A plain entry that can be used to compare this to other cells during sorting.

Never return NULLs! If there is no value, return the default value for that
cell, be it an empty string, the number zero, or something else. Never NULL.
*/
const USER_TRANSFORM_FUNCTIONS = {
    name: function(entry) {
        let s = "";

        if (entry.rrt)
            s += `<span class="stUserMarkedForDeletion">`;

        s += `<a href="${entry.link}">${ST.escapeHTML(entry.name)}</a>`;

        if (entry.locked)
            s += `<i class="icon-lock"></i>`;

        if (entry.rrt)
            s += `</span>`;

        return [
            s,
            entry.name
        ];
    },

    rrt: function(entry) {
        if (entry.rrt === undefined || entry.rrt === null || entry.rrt === 0)
            return ["", 0];

        const [valid, t] = ST.convertTimestamp(entry.rrt);

        if (!valid)
            return ["?", 0];

        return [t, entry.rrt];
    },

    role: function(entry) {
        let values = [];

        // Translate user roles
        for (let i = 0; i < entry.role.length; i++) {
            const r = entry.role[i];

            if (r in USER_ROLES) {
                if (r == "owner" || r == "schooladmin")
                    values.push(`<span class="adminOrOwner">${USER_ROLES[r]}</span>`);
                else values.push(USER_ROLES[r]);
            } else values.push(USER_ROLES['unknown']);
        }

        return [
            values.join("<br>"),
            entry.role.join()
        ];
    },

    school: function(entry) {
        // Makes filtering by school name work as expected, but the exported CSV
        // will contain display names. Can't have everything.
        return [
            entry.school[1],
            entry.school[1]
        ];
    },

    schools: function(entry) {
        let out = [];

        if (Array.isArray(entry.schools))
            for (const id of entry.schools)
                out.push((id in SCHOOLS) ? SCHOOLS[id].name : "?");

        return [out.join("<br>"), out.join(","), out.join(",")];
    },
};

<% if @is_owner %>
class MassUserDeletion extends ST.MassOperation {
    constructor(parent, container)
    {
        super(parent, container);
    }

    canProceed()
    {
        // Show an extra warning if there are synchronised deletions
        if (Object.keys(SYNC_DELETIONS).length == 0)
            return true;

        return window.confirm(`<%= t('destroy_generic_sync_warning') %>`);
    }

    processItem(item)
    {
        // Do some pre-filtering here, to prevent useless network traffic.
        // All of these tests are also done on the server end in case the
        // user tries to cheat by, for example, adjusting their system time.
        const dnd = item.dnd[ST.INDEX_EXISTS] === true && item.dnd[ST.INDEX_FILTERABLE] !== undefined,
              marked = item.rrt[ST.INDEX_EXISTS] === true && item.rrt[ST.INDEX_FILTERABLE] !== undefined,
              locked = item.locked[ST.INDEX_EXISTS] === true && item.locked[ST.INDEX_FILTERABLE] === true;

        if (dnd)
            return ST.itemProcessedStatus(false, "<%= t('users.index.mass_operations.delete.deletion_prevented') %>");

        if (!marked)
            return ST.itemProcessedStatus(false, "<%= t('users.index.mass_operations.delete.not_marked_for_deletion') %>");

        const now = Math.floor(Date.now() / 1000);
        const next = item.rrt[ST.INDEX_FILTERABLE] + (60 * 60 * 24 * 7);   // 7 days in seconds

        if (next > now)
            return ST.itemProcessedStatus(false, "<%= t('users.index.mass_operations.delete.marked_too_recently') %>");

        // Good to go
        return ST.doPOST(
            `/users/${item.school_id}/mass_op_user_delete`,
            { id: item.id[ST.INDEX_FILTERABLE] }
        );
    }
};
<% end %>

class MassUserLocking extends ST.MassOperation {
    constructor(parent, container)
    {
        super(parent, container);
        this.lock = true;
    }

    buildInterface()
    {
        this.container.innerHTML =
`<table class="settingsChild">
<tr>
    <th><%= t('users.index.mass_operations.lock.action') %></th>
    <td>
        <div class="flex-rows">
            <label><input type="radio" name="mul_action_type" id="mul_action_lock" checked><%= t('users.index.mass_operations.lock.lock') %></label>
            <label><input type="radio" name="mul_action_type" id="mul_action_unlock"><%= t('users.index.mass_operations.lock.unlock') %></label>
        </div>
    </td>
</tr>
</table>`;
    }

    start()
    {
        if (this.container.querySelector("#mul_action_lock").checked)
            this.lock = true;
        else this.lock = false;

        for (let i of this.container.querySelectorAll("input"))
            i.disabled = true;
    }

    finish()
    {
        for (let i of this.container.querySelectorAll("input"))
            i.disabled = false;
    }

    processItem(item)
    {
        // Do nothing if the user is already in the desired locking state
        if (item.locked[ST.INDEX_EXISTS] === true && item.locked[ST.INDEX_FILTERABLE] === this.lock)
            return ST.itemProcessedStatus(true);

        return ST.doPOST(
            `/users/${item.school_id}/mass_op_user_lock`,
            { id: item.id[1], lock: this.lock }
        );
    }
};

class MassUserMarkForDeletion extends ST.MassOperation {
    constructor(parent, container)
    {
        super(parent, container);

        // The default operation (mark for deletion if not marked yet)
        this.operation = 0;
    }

    buildInterface()
    {
        this.container.innerHTML =
`<table class="settingsChild">
<tr>
    <th><%= t('users.index.mass_operations.mark.action') %></th>
    <td>
        <div class="flex-rows">
            <label><input type="radio" name="mass_user_mark_action" id="mass_user_mark_mark" checked><%= t('users.index.mass_operations.mark.mark') %></label>
            <label><input type="radio" name="mass_user_mark_action" id="mass_user_mark_mark_force"><%= t('users.index.mass_operations.mark.mark_force') %></label>
            <label><input type="radio" name="mass_user_mark_action" id="mass_user_mark_unmark"><%= t('users.index.mass_operations.mark.unmark') %></label>
        </div>
    </td>
</tr>
</table>`;

        this.container.querySelector("#mass_user_mark_mark").addEventListener("click", () => this.operation = 0);
        this.container.querySelector("#mass_user_mark_mark_force").addEventListener("click", () => this.operation = 1);
        this.container.querySelector("#mass_user_mark_unmark").addEventListener("click", () => this.operation = 2);
    }

    start()
    {
        for (let i of this.container.querySelectorAll("input"))
            i.disabled = true;
    }

    finish()
    {
        for (let i of this.container.querySelectorAll("input"))
            i.disabled = false;
    }

    processItem(item)
    {
        // Pre-filter users, avoid useless network requests. All of these checks
        // are also done on the server end.
        const dnd = item.dnd[ST.INDEX_EXISTS] === true && item.dnd[ST.INDEX_FILTERABLE] !== undefined,
              marked = item.rrt[ST.INDEX_EXISTS] === true && item.rrt[ST.INDEX_FILTERABLE] !== undefined;

        if (dnd) {
            // deletion prevented
            return ST.itemProcessedStatus(false, "<%= t('users.index.mass_operations.delete.deletion_prevented') %>");
        }

        if (marked && this.operation == 0) {
            // Already marked for deletion and not in force mode
            return ST.itemProcessedStatus(true);
        }

        if (!marked && this.operation == 2) {
            // Not marked for deletion
            return ST.itemProcessedStatus(true);
        }

        return ST.doPOST(
            `/users/${item.school_id}/mass_op_user_mark`,
            { id: item.id[ST.INDEX_FILTERABLE], operation: this.operation }
        );
    }
};

class MassUserClearColumn extends ST.MassOperation {
    constructor(parent, container)
    {
        super(parent, container);

        this.column = "eid";
    }

    buildInterface()
    {
        this.container.innerHTML =
`<table class="settingsChild">
<tr>
    <th><%= t('users.index.mass_operations.clear_column.column_title') %></th>
    <td>
        <div class="flex-rows">
            <label><input type="radio" name="mass_user_clear_column" value="eid" checked><%= t('users.index.mass_operations.clear_column.columns.eid') %></label>
<% unless @automatic_email_addresses %>
            <label><input type="radio" name="mass_user_clear_column" value="email"><%= t('users.index.mass_operations.clear_column.columns.email') %></label>
<% end %>
            <label><input type="radio" name="mass_user_clear_column" value="telephone"><%= t('users.index.mass_operations.clear_column.columns.telephone') %></label>
            <label><input type="radio" name="mass_user_clear_column" value="learner_id"><%= t('users.index.mass_operations.clear_column.columns.learner_id') %></label>
            <label><input type="radio" name="mass_user_clear_column" value="pnumber"><%= t('users.index.mass_operations.clear_column.columns.pnumber') %></label>
        </div>
    </td>
</tr>
</table>`;

        for (let i of this.container.querySelectorAll("input"))
            i.addEventListener("click", (e) => this.column = e.target.value);
    }

    start()
    {
        for (let i of this.container.querySelectorAll("input"))
            i.disabled = true;
    }

    finish()
    {
        for (let i of this.container.querySelectorAll("input"))
            i.disabled = false;
    }

    processItem(item)
    {
        return ST.doPOST(
            `/users/${item.school_id}/mass_op_user_clear_column`,
            { id: item.id[ST.INDEX_FILTERABLE], column: this.column }
        );
    }
};

<% unless @is_organisation %>
class MassUsernameList extends ST.MassOperation {
    constructor(parent, container)
    {
        super(parent, container);
        this.description = "";
    }

    buildInterface()
    {
        this.container.innerHTML =
`<label for="description"><%= t('users.index.mass_operations.username_list.description') %>:</label>
<input type="text" maxlength="100" size="50" id="description">`;

        this.container.querySelector("input#description").addEventListener("change", (e) => this.description = e.target.value.trim());
    }

    processAllItems(items)
    {
        // PuavoIDs are enough for the server
        let id = [];

        for (const i of items)
            id.push(i[0].id[ST.INDEX_FILTERABLE]);

        return ST.doPOST(
            "/users/<%= @school.id %>/mass_op_username_list",
            {
                creator: "<%= current_user.givenName %> <%= current_user.sn %> (<%= current_user.uid %>)",
                description: this.description,
                user_ids: id,
            }
        );
    }
};
<% end %>

class MassUserChangeSchool extends ST.MassOperation {
    constructor(parent, container)
    {
        super(parent, container);

        // Same defaults as on the form below
        this.operation = 0;
        this.keep = false;
        this.removePrev = true;
        this.schoolID = null;
    }

    buildInterface()
    {
        let html = `
<p class="genericWarning"><%= t('users.index.mass_operations.change_school.automation_warning') %></p>
<table class="settingsChild">
<tr>
    <th><%= t('users.index.mass_operations.change_school.operation') %></label></th>
    <td>
        <div class="flex-rows gap-5px">
            <label><input type="radio" name="operation" id="move" value="move" checked><%= t('users.index.mass_operations.change_school.operation_move') %></label>
            <label class="margin-left-20px"><input type="checkbox" name="keep" id="keep"><%= t('users.index.mass_operations.change_school.operation_move_keep') %></label>
            <label class="margin-left-20px margin-bottom-5px"><input type="checkbox" name="remove_prev" id="remove_prev" checked><%= t('users.index.mass_operations.change_school.operation_remove_prev_groups') %></label>
            <label><input type="radio" name="operation" id="add" value="add"><%= t('users.index.mass_operations.change_school.operation_add') %></label>
            <label><input type="radio" name="operation" id="remove" value="remove"><%= t('users.index.mass_operations.change_school.operation_remove') %></label>
        </div>
    </td>
</tr>
<tr>
    <th><label for="mass_user_change_school"><%= t('users.index.mass_operations.change_school.target_school') %></label></th>
    <td>
        <select id="mass_user_change_school">

        <% @schools_list.sort { |a, b| a[:name].downcase <=> b[:name].downcase }.each do |s| %>
            <% next if !@allowed_schools.nil? && !@allowed_schools.include?(s[:dn]) %>
            <% next if !@is_organisation && s[:dn] == @school.dn.to_s %>
            <option value="<%= s[:id] %>"><%= s[:name] %></option>
        <% end %>

        </select></td></tr></table>`;

        this.container.innerHTML = html;
    }

    canProceed()
    {
        if (this.container.querySelector("select#mass_user_change_school").selectedIndex == -1) {
            window.alert("<%= t('users.index.mass_operations.change_school.no_available_schools').html_safe %>");
            return false;
        }

        return true;
    }

    start()
    {
        // Store the settings for the run
        if (this.container.querySelector("input#move").checked)
            this.operation = 0;
        else if (this.container.querySelector("input#add").checked)
            this.operation = 1;
        else this.operation = 2;

        this.keep = this.container.querySelector("input#keep").checked;
        this.removePrev = this.container.querySelector("input#remove_prev").checked;
        this.schoolID = this.container.querySelector("select#mass_user_change_school").value;

        for (let i of this.container.querySelectorAll("input, select"))
            i.disabled = true;
    }

    finish()
    {
        for (let i of this.container.querySelectorAll("input, select"))
            i.disabled = false;
    }

    processItem(item)
    {
        //console.log(`operation=${this.operation}, schoolID=${this.schoolID}, schoolDN=${SCHOOLS[this.schoolID].dn}, schools=${item.schools}`);

        // Unfortunately there's nothing to optimize yet, we must issue a network request
        // for every selected user
        return ST.doPOST(
            `/users/${item.school_id}/mass_op_user_change_school`,
            {
                id: item.id[ST.INDEX_FILTERABLE],
                operation: this.operation,
                keep: this.keep,
                remove_prev: this.removePrev,
                school_id: this.schoolID,
                school_dn: SCHOOLS[this.schoolID].dn,
            }
        );
    }
};

const MASS_OPERATIONS = [
<% if @is_owner %>
    {
        id: "delete",
        title: "<%= t('users.index.mass_operations.delete.title') %>",
        //flags: ST.MassOperationFlags.HAVE_SETTINGS,
        cls: MassUserDeletion,
    },
<% end %>

    {
        id: "lock",
        title: "<%= t('users.index.mass_operations.lock.title') %>",
        flags: ST.MassOperationFlags.HAVE_SETTINGS,
        cls: MassUserLocking
    },

    {
        id: "mark_for_deletion",
        title: "<%= t('users.index.mass_operations.mark.title') %>",
        flags: ST.MassOperationFlags.HAVE_SETTINGS,
        cls: MassUserMarkForDeletion
    },

    {
        id: "clear_columm",
        title: "<%= t('users.index.mass_operations.clear_column.title') %>",
        flags: ST.MassOperationFlags.HAVE_SETTINGS,
        cls: MassUserClearColumn
    },

<% unless @is_organisation %>
    {
        id: "create_username_list",
        title: "<%= t('users.index.mass_operations.username_list.title') %>",
        flags: ST.MassOperationFlags.SINGLESHOT | ST.MassOperationFlags.HAVE_SETTINGS,
        cls: MassUsernameList
    },
<% end %>

    {
        id: "change_school",
        title: "<%= t('users.index.mass_operations.change_school.title') %>",
        flags: ST.MassOperationFlags.HAVE_SETTINGS,
        cls: MassUserChangeSchool
    },
];

const FILTER_PRESETS = [
    // Traditional
    {
        smoketest_users: {
            title: "<%= t('users.index.filters.smoketest_users') %>",
            filters: [
                [1,"uid","=","^test.user.[0-9a-fA-F]+$"]
            ],
        },

        locked: {
            title: "<%= t('users.index.filters.locked_users') %>",
            filters: [
                [1,"locked","=","1"]
            ],
        },

        marked_for_deletion: {
            title: "<%= t('users.index.filters.marked_for_deletion') %>",
            filters: [
                [1,"rrt",">=","2010-01-01 00:00:00"]
            ],
        },

        unlocked_deleted: {
            title: "<%= t('users.index.filters.marked_for_deletion_not_locked') %>",
            filters: [
                [1,"locked","!=","1"],
                [1,"rrt",">=","2010-01-01 00:00:00"],
                [0,"eid","=","^$"]
            ],
        },

        marked_for_3months: {
            title: "<%= t('users.index.filters.marked_3months') %>",
            filters: [
                [1,"rrt","<","-90d"],
                [0,"eid","=",""]
            ],
        },

        marked_for_6months: {
            title: "<%= t('users.index.filters.marked_6months') %>",
            filters: [
                [1,"rrt","<","-180d"],
                [0,"eid","=",""]
            ],
        },

        marked_for_9months: {
            title: "<%= t('users.index.filters.marked_9months') %>",
            filters: [
                [1,"rrt","<","-270d"],
                [0,"eid","=",""]
            ],
        },

        marked_for_12months: {
            title: "<%= t('users.index.filters.marked_12months') %>",
            filters: [
                [1,"rrt","<","-365d"],
                [0,"eid","=",""]
            ],
        },

        short_uids: {
            title: "<%= t('users.index.filters.short_uids') %>",
            filters: [
                [1,"uid","=","^[a-z0-9-.]{1,5}$"]
            ],
        }
    },

    // Advanced
    {
        marked_for_3months: {
            title: "<%= t('users.index.filters.marked_3months') %>",
            filter: `rrt !! t && rrt < -90d`,
        },

        marked_for_6months: {
            title: "<%= t('users.index.filters.marked_6months') %>",
            filter: `rrt !! t && rrt < -180d`,
        },

        marked_for_9months: {
            title: "<%= t('users.index.filters.marked_9months') %>",
            filter: `rrt !! t && rrt < -270d`,
        },

        marked_for_12months: {
            title: "<%= t('users.index.filters.marked_12months') %>",
            filter: `rrt !! t && rrt < -365d`,
        },

        smoketest_users: {
            title: "<%= t('users.index.filters.smoketest_users') %>",
            filter: `uid = /^test.user.[0-9a-fA-F]+$/`,
        },

        locked: {
            title: "<%= t('users.index.filters.locked_users') %>",
            filter: `locked !! t && locked = t`,
        },

        marked_for_deletion_not_locked: {
            title: "<%= t('users.index.filters.marked_for_deletion_not_locked') %>",
            filter: `rrt !! t && rrt > 2010 && locked == f`,
        },

        short_uids: {
            title: "<%= t('users.index.filters.short_uids') %>",
            filter: `uid = /^[a-z0-9-.]{1,5}$/`,
        }
    }
];

const SYNC_DELETIONS = <%= raw JSON.pretty_generate(@synchronised_deletions) %>;

function userActions(item)
{
    let html = "";

    const link = `/users/${item.school_id}/users/${item.id[ST.INDEX_FILTERABLE]}`;
    const dnd = item.dnd[ST.INDEX_EXISTS] === true && item.dnd[ST.INDEX_FILTERABLE] !== undefined;

    html += `<a href="${link}/edit" class="btn"><%= t('link.edit') %></a> `;

    if (!dnd) {
<% if @is_owner || @permit_single_user_deletion %>
        let isAdmin = false,
            message = null;

        // Extra warning when deleting owners/admins
        for (let t of item.role[1].split(",")) {
            if (t == "owner" || t == "admin") {
                isAdmin = true;
                break;
            }
        }

        if (isAdmin)
            message = "<%= t('destroy_confirm_admin') %>";
        else message = "<%= t('general_confirm') %>";

        const school_id = item.school_id;

        if (school_id in SYNC_DELETIONS && SYNC_DELETIONS[school_id].length > 0) {
            // Extra warning about deletion synchronisations. "SYSTEM_NAMES_HERE" is the only
            // placeholder I could came up with to stop JavaScript's string interpolation from
            // throwing up because it couldn't find the placeholder. I tried ${name}, $(name)
            // and a bunch of others. Of course it attempted to process them all. I need to
            // use `` for the string because it's the only way to have multiline strings in
            // JavaScript.
            message += "\n\n";
            message += `<%= t('destroy_exact_sync_warning') %>`
                       .replace("SYSTEM_NAMES_HERE", SYNC_DELETIONS[school_id].join(", "));
        }

        html += `<a href="${link}" data-method="delete" data-confirm="${message}" rel="nofollow" class="btn btn-danger"><%= t('link.destroy') %></a>`
<% end %>
    }

    return html;
}

function openCallback(item)
{
    return `/users/${item.school_id}/users/${item.id[ST.INDEX_DISPLAYABLE]}`;
}

const MASS_SELECTS = [
    ["uid", "<%= t('columns.users.uid') %>"],
    ["name", "<%= t('columns.users.full_name') %>"],
    ["eid", "<%= t('columns.users.eid') %>"],
    ["id", "<%= t('columns.puavoid') %>"],
];
