// Table column definitions
const COLUMN_DEFINITIONS = {
    abitti_version: {
        key: "abitti_version",
        flags: ColumnFlag.SORTABLE | ColumnFlag.USER_TRANSFORM,
        type: ColumnType.INTEGER,
        defaultOperator: FilterOperator.EQU,
    },

    allow_guest: {
        key: "allow_guest",
        flags: ColumnFlag.SORTABLE,
        type: ColumnType.BOOL,
        defaultOperator: FilterOperator.EQU,
    },

    audio_sink: {
        key: "audio_sink",
        flags: ColumnFlag.SORTABLE,
        type: ColumnType.STRING,
        defaultOperator: FilterOperator.EQU,
    },

    audio_src: {
        key: "audio_src",
        flags: ColumnFlag.SORTABLE,
        type: ColumnType.STRING,
        defaultOperator: FilterOperator.EQU,
    },

    auto_updates: {
        key: "auto_updates",
        flags: ColumnFlag.SORTABLE,
        type: ColumnType.BOOL,
        defaultOperator: FilterOperator.EQU,
    },

    autopower_mode: {
        key: "autopower_mode",
        flags: ColumnFlag.SORTABLE,
        type: ColumnType.STRING,
        defaultOperator: FilterOperator.EQU,
    },

    autopower_on: {
        key: "autopower_on",
        flags: ColumnFlag.SORTABLE,
        type: ColumnType.INTEGER,
        defaultOperator: FilterOperator.EQU,
    },

    autopower_off: {
        key: "autopower_off",
        flags: ColumnFlag.SORTABLE,
        type: ColumnType.INTEGER,
        defaultOperator: FilterOperator.EQU,
    },

<% if @is_servers %>
    available_images: {
        key: "available_images",
        flags: ColumnFlag.SORTABLE | ColumnFlag.USER_TRANSFORM,
        type: ColumnType.STRING,
        defaultOperator: FilterOperator.EQU,
    },
<% end %>

    bat_cap: {
        key: "bat_cap",
        flags: ColumnFlag.SORTABLE | ColumnFlag.USER_TRANSFORM,
        type: ColumnType.INTEGER,
        defaultOperator: FilterOperator.LTE,
    },

    bat_pcnt: {
        key: "bat_pcnt",
        flags: ColumnFlag.SORTABLE | ColumnFlag.USER_TRANSFORM,
        type: ColumnType.FLOAT,
        defaultOperator: FilterOperator.LTE,
    },

    bat_volts: {
        key: "bat_volts",
        flags: ColumnFlag.SORTABLE | ColumnFlag.USER_TRANSFORM,
        type: ColumnType.FLOAT,
        defaultOperator: FilterOperator.LTE,
    },

    bat_serial: {
        key: "bat_serial",
        flags: ColumnFlag.SORTABLE,
        type: ColumnType.STRING,
        defaultOperator: FilterOperator.EQU,
    },

    bat_vendor: {
        key: "bat_vendor",
        flags: ColumnFlag.SORTABLE,
        type: ColumnType.STRING,
        defaultOperator: FilterOperator.EQU,
    },

    bios_date: {
        key: "bios_date",
        flags: ColumnFlag.SORTABLE,
        type: ColumnType.STRING,
        defaultOperator: FilterOperator.EQU,
    },

    bios_vendor: {
        key: "bios_vendor",
        flags: ColumnFlag.SORTABLE,
        type: ColumnType.STRING,
        defaultOperator: FilterOperator.EQU,
    },

    bios_version: {
        key: "bios_version",
        flags: ColumnFlag.SORTABLE,
        type: ColumnType.STRING,
        defaultOperator: FilterOperator.EQU,
    },

    conf: {
        key: "conf",
        flags: ColumnFlag.SORTABLE | ColumnFlag.ARRAY,
        type: ColumnType.STRING,
        defaultOperator: FilterOperator.EQU,
    },

    cpu: {
        key: "cpu",
        flags: ColumnFlag.SORTABLE,
        type: ColumnType.STRING,
        defaultOperator: FilterOperator.EQU,
    },

    created: {
        key: "created",
        flags: ColumnFlag.SORTABLE,
        type: ColumnType.UNIXTIME,
        defaultOperator: FilterOperator.GTE,
    },

    current_image: {
        key: "current_image",
        flags: ColumnFlag.SORTABLE | ColumnFlag.USER_TRANSFORM,
        type: ColumnType.STRING,
    },

    default_printer: {
        key: "default_printer",
        flags: ColumnFlag.SORTABLE,
        type: ColumnType.STRING,
        defaultOperator: FilterOperator.EQU,
    },

    desc: {
        key: "desc",
        flags: ColumnFlag.SORTABLE | ColumnFlag.USER_TRANSFORM,
        type: ColumnType.STRING,
        defaultOperator: FilterOperator.EQU,
    },

    df_home: {
        key: "df_home",
        flags: ColumnFlag.SORTABLE,
        type: ColumnType.INTEGER,
        defaultOperator: FilterOperator.EQU,
    },

    df_images: {
        key: "df_images",
        flags: ColumnFlag.SORTABLE,
        type: ColumnType.INTEGER,
        defaultOperator: FilterOperator.EQU,
    },

    df_state: {
        key: "df_state",
        flags: ColumnFlag.SORTABLE,
        type: ColumnType.INTEGER,
        defaultOperator: FilterOperator.EQU,
    },

    df_tmp: {
        key: "df_tmp",
        flags: ColumnFlag.SORTABLE,
        type: ColumnType.INTEGER,
        defaultOperator: FilterOperator.EQU,
    },

    hd: {
        key: "hd",
        flags: ColumnFlag.SORTABLE,
        type: ColumnType.INTEGER,
        defaultOperator: FilterOperator.LT,
    },

    hd_ssd: {
        key: "hd_ssd",
        flags: ColumnFlag.SORTABLE,
        type: ColumnType.BOOL,
        defaultOperator: FilterOperator.EQU,
    },

    hn: {
        key: "hn",
        flags: ColumnFlag.SORTABLE | ColumnFlag.USER_TRANSFORM,
        type: ColumnType.STRING,
        defaultOperator: FilterOperator.EQU,
    },

    hw_time: {
        key: "hw_time",
        flags: ColumnFlag.SORTABLE,
        type: ColumnType.UNIXTIME,
        defaultOperator: FilterOperator.LTE,
    },

    id: {
        key: "id",
        flags: ColumnFlag.SORTABLE,
        type: ColumnType.INTEGER,
        defaultOperator: FilterOperator.EQU,
    },

    image: {
        key: "image",
        flags: ColumnFlag.SORTABLE | ColumnFlag.USER_TRANSFORM,
        type: ColumnType.STRING,
        defaultOperator: FilterOperator.EQU,
    },

    image_series: {
        key: "image_series",
        flags: ColumnFlag.SORTABLE,
        type: ColumnType.STRING,
        defaultOperator: FilterOperator.EQU,
    },

    krn_args: {
        key: "krn_args",
        flags: ColumnFlag.SORTABLE,
        type: ColumnType.STRING,
        defaultOperator: FilterOperator.EQU,
    },

    krn_ver: {
        key: "krn_ver",
        flags: ColumnFlag.SORTABLE,
        type: ColumnType.STRING,
        defaultOperator: FilterOperator.EQU,
    },

    location: {
        key: "location",
        flags: ColumnFlag.SORTABLE | ColumnFlag.ARRAY,
        type: ColumnType.STRING,
        defaultOperator: FilterOperator.EQU,
    },

    loc_lat: {
        key: "loc_lat",
        flags: ColumnFlag.SORTABLE,
        type: ColumnType.STRING,
        defaultOperator: FilterOperator.EQU,
    },

    loc_lon: {
        key: "loc_lon",
        flags: ColumnFlag.SORTABLE,
        type: ColumnType.STRING,
        defaultOperator: FilterOperator.EQU,
    },

    lspci: {
        key: "lspci",
        flags: ColumnFlag.SORTABLE | ColumnFlag.ARRAY,
        type: ColumnType.STRING,
        defaultOperator: FilterOperator.EQU,
    },

    lsusb: {
        key: "lsusb",
        flags: ColumnFlag.SORTABLE | ColumnFlag.ARRAY,
        type: ColumnType.STRING,
        defaultOperator: FilterOperator.EQU,
    },

    mac: {
        key: "mac",
        flags: ColumnFlag.SORTABLE | ColumnFlag.ARRAY,
        type: ColumnType.STRING,
        defaultOperator: FilterOperator.EQU,
    },

    mfer: {
        key: "mfer",
        flags: ColumnFlag.SORTABLE,
        type: ColumnType.STRING,
        defaultOperator: FilterOperator.EQU,
    },

    model: {
        key: "model",
        flags: ColumnFlag.SORTABLE,
        type: ColumnType.STRING,
        defaultOperator: FilterOperator.EQU,
    },

    modified: {
        key: "modified",
        flags: ColumnFlag.SORTABLE,
        type: ColumnType.UNIXTIME,
        defaultOperator: FilterOperator.LTE,
    },

    monitors_xml: {
        key: "monitors_xml",
        flags: ColumnFlag.SORTABLE | ColumnFlag.USER_TRANSFORM,
        type: ColumnType.STRING,
        defaultOperator: FilterOperator.EQU,
    },

<% if @is_organisation %>
    school: {
        key: "school",
        type: ColumnType.STRING,
        flags: ColumnFlag.SORTABLE | ColumnFlag.USER_TRANSFORM,
        defaultOperator: FilterOperator.EQU,
    },
<% end %>

<% if @is_servers %>
    schools: {
        key: "schools",
        flags: ColumnFlag.SORTABLE | ColumnFlag.USER_TRANSFORM,
        type: ColumnType.STRING,
        defaultOperator: FilterOperator.EQU,
    },
<% end %>

    user: {
        key: "user",
        flags: ColumnFlag.SORTABLE | ColumnFlag.USER_TRANSFORM,
        type: ColumnType.STRING,
        defaultOperator: FilterOperator.EQU,
    },

    personal_admin: {
        key: "personal_admin",
        flags: ColumnFlag.SORTABLE,
        type: ColumnType.BOOL,
        defaultOperator: FilterOperator.EQU,
    },

    personal_device: {
        key: "personal_device",
        flags: ColumnFlag.SORTABLE,
        type: ColumnType.BOOL,
        defaultOperator: FilterOperator.EQU,
    },

    printer_uri: {
        key: "printer_uri",
        flags: ColumnFlag.SORTABLE,
        type: ColumnType.STRING,
        defaultOperator: FilterOperator.EQU,
    },

    purchase_date: {
        key: "purchase_date",
        flags: ColumnFlag.SORTABLE | ColumnFlag.USER_TRANSFORM,
        type: ColumnType.UNIXTIME,
        defaultOperator: FilterOperator.LTE,
    },

    purchase_loc: {
        key: "purchase_loc",
        flags: ColumnFlag.SORTABLE,
        type: ColumnType.STRING,
        defaultOperator: FilterOperator.EQU,
    },

    purchase_support: {
        key: "purchase_support",
        flags: ColumnFlag.SORTABLE,
        type: ColumnType.STRING,
        defaultOperator: FilterOperator.EQU,
    },

    purchase_url: {
        key: "purchase_url",
        flags: ColumnFlag.SORTABLE,
        type: ColumnType.STRING,
        defaultOperator: FilterOperator.EQU,
    },

    purchase_warranty: {
        key: "purchase_warranty",
        flags: ColumnFlag.SORTABLE | ColumnFlag.USER_TRANSFORM,
        type: ColumnType.UNIXTIME,
        defaultOperator: FilterOperator.LTE,
    },

    ram: {
        key: "ram",
        flags: ColumnFlag.SORTABLE,
        type: ColumnType.INTEGER,
        defaultOperator: FilterOperator.LT,
    },

    serial: {
        key: "serial",
        flags: ColumnFlag.SORTABLE,
        type: ColumnType.STRING,
        defaultOperator: FilterOperator.EQU,
    },

    status: {
        key: "status",
        flags: ColumnFlag.SORTABLE,
        type: ColumnType.STRING,
        defaultOperator: FilterOperator.EQU,
    },

    tags: {
        key: "tags",
        flags: ColumnFlag.SORTABLE | ColumnFlag.ARRAY,
        type: ColumnType.STRING,
        defaultOperator: FilterOperator.EQU,
    },

    type: {
        key: "type",
        flags: ColumnFlag.SORTABLE | ColumnFlag.USER_TRANSFORM,
        type: ColumnType.STRING,
        defaultOperator: FilterOperator.EQU,
    },

    wifi: {
        key: "wifi",
        flags: ColumnFlag.SORTABLE,
        type: ColumnType.STRING,
        defaultOperator: FilterOperator.EQU,
    },

    windows_license: {
        key: "windows_license",
        flags: ColumnFlag.SORTABLE,
        type: ColumnType.BOOL,
        defaultOperator: FilterOperator.EQU,
    },

    xrandr: {
        key: "xrandr",
        flags: ColumnFlag.SORTABLE | ColumnFlag.ARRAY,
        type: ColumnType.STRING,
        defaultOperator: FilterOperator.EQU,
    },

    xserver: {
        key: "xserver",
        flags: ColumnFlag.SORTABLE,
        type: ColumnType.STRING,
        defaultOperator: FilterOperator.EQU,
    },
};

// Localized column titles
const COLUMN_TITLES = {
    abitti_version: "<%= t('columns.devices.abitti_version') %>",
    allow_guest: "<%= t('columns.devices.allow_guest') %>",
    audio_sink: "<%= t('columns.devices.audio_sink') %>",
    audio_src: "<%= t('columns.devices.audio_src') %>",
    auto_updates: "<%= t('columns.devices.auto_updates') %>",
    autopower_mode: "<%= t('columns.devices.autopower_mode') %>",
    autopower_on: "<%= t('columns.devices.autopower_on') %>",
    autopower_off: "<%= t('columns.devices.autopower_off') %>",
    available_images: "<%= t('columns.servers.available_images') %>",
    bat_cap: "<%= t('columns.devices.bat_cap') %>",
    bat_pcnt: "<%= t('columns.devices.bat_pcnt') %>",
    bat_volts: "<%= t('columns.devices.bat_volts') %>",
    bat_serial: "<%= t('columns.devices.bat_serial') %>",
    bat_vendor: "<%= t('columns.devices.bat_vendor') %>",
    bios_date: "<%= t('columns.devices.bios_date') %>",
    bios_vendor: "<%= t('columns.devices.bios_vendor') %>",
    bios_version: "<%= t('columns.devices.bios_version') %>",
    conf: "<%= t('columns.puavoconf') %>",
    cpu: "<%= t('columns.devices.cpu') %>",
    created: "<%= t('columns.created') %>",
    current_image: "<%= t('columns.devices.current_image') %>",
    default_printer: "<%= t('columns.devices.default_printer') %>",
    desc: "<%= t('columns.devices.description') %>",
    df_home: "<%= t('columns.devices.df_home') %>",
    df_images: "<%= t('columns.devices.df_images') %>",
    df_state: "<%= t('columns.devices.df_state') %>",
    df_tmp: "<%= t('columns.devices.df_tmp') %>",
    hd: "<%= t('columns.devices.hwinfo_hd_size') %>",
    hd_ssd: "<%= t('columns.devices.hwinfo_is_ssd') %>",
    hn: "<%= t('columns.devices.hostname') %>",
    hw_time: "<%= t('columns.devices.hwinfo_time') %>",
    id: "<%= t('columns.puavoid') %>",
    image: "<%= t('columns.devices.image') %>",
    image_series: "<%= t('columns.devices.image_series') %>",
    krn_args: "<%= t('columns.devices.kernel_args') %>",
    krn_ver: "<%= t('columns.devices.kernel_version') %>",
    location: "<%= t('columns.devices.location') %>",
    loc_lat: "<%= t('columns.devices.loc_lat') %>",
    loc_lon: "<%= t('columns.devices.loc_lon') %>",
    lspci: "<%= t('columns.devices.lspci') %>",
    lsusb: "<%= t('columns.devices.lsusb') %>",
    mac: "<%= t('columns.devices.mac') %>",
    mfer: "<%= t('columns.devices.manufacturer') %>",
    model: "<%= t('columns.devices.model') %>",
    modified: "<%= t('columns.modified') %>",
    monitors_xml: "<%= t('columns.devices.monitors_xml') %>",
<% if @is_organisation %>
    school: "<%= t('columns.school') %>",
<% end %>
<% if @is_servers %>
    schools: "<%= t('columns.servers.schools') %>",
<% end %>
    status: "<%= t('columns.devices.status') %>",
    user: "<%= t('columns.devices.primary_user') %>",
    personal_admin: "<%= t('columns.devices.personal_admin') %>",
    personal_device: "<%= t('columns.devices.personal_device') %>",
    printer_uri: "<%= t('columns.devices.printer_uri') %>",
    purchase_date: "<%= t('columns.devices.purchase_date') %>",
    purchase_loc: "<%= t('columns.devices.purchase_loc') %>",
    purchase_support: "<%= t('columns.devices.purchase_support') %>",
    purchase_url: "<%= t('columns.devices.purchase_url') %>",
    purchase_warranty: "<%= t('columns.devices.purchase_warranty') %>",
    ram: "<%= t('columns.devices.hwinfo_ram_size') %>",
    serial: "<%= t('columns.devices.serial') %>",
    tags: "<%= t('columns.devices.tags') %>",
    type: "<%= t('columns.devices.type') %>",
    wifi: "<%= t('columns.devices.wifi') %>",
    windows_license: "<%= t('columns.devices.has_windows_license') %>",
    xrandr: "<%= t('columns.devices.xrandr') %>",
    xserver: "<%= t('columns.devices.xserver') %>",
};

// The default order for columns
const COLUMN_ORDER = [
<% if @is_organisation %>
    "school",
    "hw_time",
<% end %>
    "id",
    "hn",
<% if @is_servers %>
    "schools",
    "available_images",
    "location",
    "mac",
<% end %>
    "type",
    "tags",
<% unless @is_servers %>
    "mac",
<% end %>
    "mfer",
    "model",
    "serial",
    "status",
    "desc",
    "image",
    "current_image",
    "image_series",
    "krn_args",
    "krn_ver",
    "created",
    "modified",
    "conf",
    "user",
<% unless @is_organisation %>
    "hw_time",
<% end %>
<% if @is_servers %>
    "hw_time",
<% end %>
    "ram",
    "hd",
    "hd_ssd",
    "df_home",
    "df_images",
    "df_state",
    "df_tmp",
    "cpu",
    "bios_vendor",
    "bios_version",
    "bios_date",
    "bat_vendor",
    "bat_serial",
    "bat_cap",
    "bat_pcnt",
    "bat_volts",
    "wifi",
    "xrandr",
    "xserver",
    "monitors_xml",
    "lspci",
    "lsusb",
    "abitti_version",
    "windows_license",
    "purchase_date",
    "purchase_warranty",
    "purchase_loc",
    "purchase_url",
    "purchase_support",
<% unless @is_servers %>
    "location",
<% end %>
    "loc_lat",
    "loc_lon",
    "default_printer",
    "printer_uri",
    "audio_src",
    "audio_sink",
    "allow_guest",
    "personal_admin",
    "personal_device",
    "auto_updates",
    "autopower_mode",
    "autopower_on",
    "autopower_off",
];

// Localized device types
const DEVICE_TYPES = {
    thinclient: "<%= t('host.types.thinclient') %>",
    fatclient: "<%= t('host.types.fatclient') %>",
    laptop: "<%= t('host.types.laptop') %>",
    workstation: "<%= t('host.types.workstation') %>",
    server: "<%= t('host.types.server') %>",
    netstand: "<%= t('host.types.netstand') %>",
    infotv: "<%= t('host.types.infotv') %>",
    switch: "<%= t('host.types.switch') %>",
    printer: "<%= t('host.types.printer') %>",
    projector: "<%= t('host.types.projector') %>",
    webcam: "<%= t('host.types.webcam') %>",
    other: "<%= t('host.types.other') %>",
};

const USER_TRANSFORM_FUNCTIONS = {
    abitti_version: function(entry) {
        const v = entry.abitti_version;
        let display, value;

        if (v == "latest") {
            display = "latest";
            value = 9999999;        // CSV exporting unfortunately reveals this hack
        } else {
            display = v;
            value = parseInt(v, 10);
        }

        return [display, value];
    },

<% if @is_servers %>
    available_images: function(entry) {
        let display = [],
            value = [];

        for (const i of entry.available_images) {
            if (i.release)
                display.push(`${i.file} <span class="releaseName">(${i.release})</span>`);
            else display.push(`${i.file}`);

            value.push(i.file);
        }

        return [display.join('<br>'), value.join(',')];
    },
<% end %>

    bat_cap: function(entry) {
        return [
            `${entry.bat_cap}%`,
            entry.bat_cap,
        ];
    },

    bat_pcnt: function(entry) {
        return [
            `${entry.bat_pcnt}%`,
            entry.bat_pcnt,
        ];
    },

    bat_volts: function(entry) {
        return [
            `${entry.bat_volts}V`,
            entry.bat_volts,
        ];
    },

    current_image: function(entry) {
        let display = "",
            value = entry.current_image.file;

        if (entry.current_image.release)
            display = `${entry.current_image.file} <span class="releaseName">(${entry.current_image.release})</span>`;
        else display = entry.current_image.file;

        return [display, value];
    },

    desc: function(entry) {
        return [
            escapeHTML(entry.desc),
            entry.desc,
        ]
    },

    hn: function(entry) {
        return [
            `<a href="${entry.link}">${escapeHTML(entry.hn)}</a>`,
            entry.hn
        ];
    },

    image: function(entry) {
        let display = "",
            value = entry.image.file;

        if (entry.image.release)
            display = `${entry.image.file} <span class="releaseName">(${entry.image.release})</span>`;
        else display = entry.image.file;

        return [display, value];
    },

    purchase_date: function(entry) {
        const ts = convertTimestampDateOnly(entry.purchase_date);

        return [
            ts[0] === true ? ts[1] : "?",
            entry.purchase_date
        ];
    },

    purchase_warranty: function(entry) {
        const ts = convertTimestampDateOnly(entry.purchase_warranty);

        return [
            ts[0] === true ? ts[1] : "?",
            entry.purchase_warranty
        ];
    },

    school: function(entry) {
        // Makes filtering by school name work as expected, but the exported CSV
        // will contain display names. Can't have everything.
        return [
            entry.school[1],
            entry.school[1]
        ];
    },

<% if @is_servers %>
    schools: function(entry) {
        let display = [],
            value = [];

        for (const sch of entry.schools) {
            if (sch.valid) {
                display.push(`<a href="${sch.link}">${sch.title}</a>`);
                value.push(sch.title);
            } else {
                display.push(`<span class="missingData">${sch.dn}</span>`);
                value.push('?');
            }
        }

        return [display.join("<br>"), value.join(',')];
    },
<% end %>

    type: function(entry) {
        if (entry.type in DEVICE_TYPES)
            return [DEVICE_TYPES[entry.type], entry.type];

        return [entry.type, entry.type];
    },

    user: function(entry) {
        if (entry.user.valid) {
            return [
                `<a href="${entry.user.link}">${entry.user.title}</a>`,
                entry.user.title,
            ]
        } else {
            return [
                `<span class="missingData">${entry.user.dn}</span>`,
                entry.user.dn,
            ]
        }
    },

    monitors_xml: function(entry) {
        // It's actually XML, but HTML escaping can handle it
        return ["<pre>" + escapeHTML(entry.monitors_xml[0]) + "</pre>", entry.monitors_xml];
    },
};

const FILTER_PRESETS = [
    {
        title: "<%= t('devices.index.filters.uses_trusty') %>",
        id: "uses_trusty",
        filters: [
            {"active":true,"column":"current_image","operator":"equ","value":"trusty"},
            {"active":false,"column":"image","operator":"equ","value":"^$"}
        ],
    },

    {
        title: "<%= t('devices.index.filters.uses_stretch') %>",
        id: "uses_stretch",
        filters: [
            {"active":true,"column":"current_image","operator":"equ","value":"stretch"},
            {"active":false,"column":"image","operator":"equ","value":"^$"}
        ],
    },

    {
        title: "<%= t('devices.index.filters.uses_buster') %>",
        id: "uses_buster",
        filters: [
            {"active":true,"column":"current_image","operator":"equ","value":"buster"},
            {"active":false,"column":"image","operator":"equ","value":"^$"}
        ],
    },

    {
        title: "<%= t('devices.index.filters.have_monitors_xml') %>",
        id: "has_monitors_xml",
        filters: [
            {"active":true,"column":"monitors_xml","operator":"neq","value":"^$"},
        ],
    },

    {
        title: "<%= t('devices.index.filters.have_xrandr') %>",
        id: "has_xrandr",
        filters: [
            {"active":true,"column":"xrandr","operator":"neq","value":"^$"},
        ],
    },

    {
        title: "<%= t('devices.index.filters.have_hwinfo') %>",
        id: "has_hwinfo",
        filters: [
            {"active":true,"column":"hw_time","operator":"gte","value":"2010-01-01 00:00:00"},
        ],
    },

    {
        title: "<%= t('devices.index.filters.has_primary_user') %>",
        id: "has_hwinfo",
        filters: [
            {"active":true,"column":"user","operator":"neq","value":"^$"},
        ],
    },

    {
        title: "<%= t('devices.index.filters.has_invalid_primary_user') %>",
        id: "has_hwinfo",
        filters: [
            {"active":true,"column":"user","operator":"equ","value":"puavoId="},
        ],
    },
];

<% unless @is_servers %>
class MassDeviceSetFieldValue extends MassOperation {
    constructor(parent, container)
    {
        super(parent, container);

        this.items = [
            { title: "<%= t('devices.index.mass_operations.set_field.desktop_image') %>", key: "image", type: "s" },
            { title: "<%= t('devices.index.mass_operations.set_field.kernel_args') %>", key: "kernelargs", type: "s" },
            { title: "<%= t('devices.index.mass_operations.set_field.kernel_version') %>", key: "kernelversion", type: "s" },
            { title: "<%= t('devices.index.mass_operations.set_field.puavoconf_replace') %>", key: "puavoconf", type: "json" },
            { title: "<%= t('devices.index.mass_operations.set_field.tags_replace') %>", key: "tags", type: "s" },
            { title: "<%= t('devices.index.mass_operations.set_field.manufacturer') %>", key: "manufacturer", type: "s" },
            { title: "<%= t('devices.index.mass_operations.set_field.model') %>", key: "model", type: "s" },
            { title: "<%= t('devices.index.mass_operations.set_field.serial') %>", key: "serial", type: "s" },
            { title: "<%= t('devices.index.mass_operations.set_field.primary_user') %>", key: "primary_user", type: "s" },
            { title: "<%= t('devices.index.mass_operations.set_field.description') %>", key: "description", type: "ms" },
        ];
    }

    buildInterface()
    {
        let html = "";

        html +=
`<form>
<table class="settingsChild"><tr>
<th><label for="mass_device_set_field_name"><%= t('devices.index.mass_operations.set_field.field') %></label></th>
<td><select id="mass_device_set_field_name">`;

        // List the possible fields in alphabetical order
        let sorted = [];

        for (let i = 0; i < this.items.length; i++)
            sorted.push([this.items[i].title, i]);

        sorted.sort((a, b) => { return a[0].localeCompare(b[0]) });

        for (const s of sorted) {
            const item = this.items[s[1]];
            html += `<option value="${s[1]}">${item.title}</option>`;
        }

        html +=
`</select></td></tr>
<tr>
<th><label for="mass_device_set_field_value"><%= t('devices.index.mass_operations.set_field.value') %></label></th>
<td><div id="uiChild"></div>
<p class="validityWarning"><%= t('devices.index.mass_operations.set_field.validity_warning') %></p>
</td></tr></table></form>`;

        this.container.innerHTML = html;

        this.container.querySelector("select#mass_device_set_field_name").addEventListener("change",
            (e) => this.buildChildUI(e.target.selectedOptions[0].value));

        this.currentUI = -1;
        this.buildChildUI(sorted[0][1]);
    }

    buildChildUI(index)
    {
        const item = this.items[index];

        let ui = "";

        switch (item.type) {
            case "s":           // String
            default:
                ui = `<input type="text" id="mass_device_set_field_value" size="40">`;
                break;

            case "ms":          // Multiline string
                ui = `<textarea id="mass_device_set_field_value" rows="5" cols="40"></textarea>`;
                break;

            case "json":        // Same as multiline string, but displays a note about the JSON
                ui = `<textarea id="mass_device_set_field_value" rows="5" cols="40"></textarea>` +
                     `<p><%= t('devices.index.mass_operations.set_field.json') %></p>`;
                break;
        }

        this.container.querySelector("div#uiChild").innerHTML = ui;
        this.currentUI = index;
    }

    processItem(item)
    {
        let ui = this.container.querySelector("div#uiChild");

        // Retrieve the value. There are no event handlers, so dig it from
        // the DOM directly.
        let value = null;

        switch (this.items[this.currentUI].type) {
            case "s":
            default:
                value = ui.querySelector("input").value;
                break;

            case "ms":
            case "json":
                value = ui.querySelector("textarea").value;
                break;
        }

        return doPOST(
            `/devices/${item.school_id}/mass_op_device_set_field`,
            {
                id: item.id[0],
                field: this.items[this.currentUI].key,
                value: value
            }
        );
    }
};

class MassDevicePurchaseInfo extends MassOperation {
    constructor(parent, container)
    {
        super(parent, container);
    }

    buildInterface()
    {
        this.container.innerHTML = `
<form>
<p style="margin: 0; padding: 10px; font-weight: bold;"><%= t('devices.index.mass_operations.purchase_info.validity_warning') %></p>
<table class="settingsChild">
<tr>
    <th>
        <input type="checkbox" id="mass_device_purchase_info_purchase_date">
        <label for="mass_device_purchase_info_purchase_date"><%= t('activeldap.attributes.device.puavoPurchaseDate') %>:</label>
    </th>
    <td><input type="date" id="mass_device_purchase_info_purchase_date_value" min="2000-01-01" max="2050-12-31"></td>
</tr>
<tr>
    <th>
        <input type="checkbox" id="mass_device_purchase_info_warranty_end_date">
        <label for="mass_device_purchase_info_warranty_end_date"><%= t('activeldap.attributes.device.puavoWarrantyEndDate') %>:</label>
    </th>
    <td><input type="date" id="mass_device_purchase_info_warranty_end_date_value" min="2000-01-01" max="2050-12-31"></td>
</tr>
<tr>
    <th>
        <input type="checkbox" id="mass_device_purchase_info_purchase_location">
        <label for="mass_device_purchase_info_purchase_location"><%= t('activeldap.attributes.device.puavoPurchaseLocation') %>:</label>
    </th>
    <td><input type="text" id="mass_device_purchase_info_purchase_location_value"></td>
</tr>
<tr>
    <th>
        <input type="checkbox" id="mass_device_purchase_info_purchase_url">
        <label for="mass_device_purchase_info_purchase_url"><%= t('activeldap.attributes.device.puavoPurchaseURL') %>:</label>
    </th>
    <td><input type="text" id="mass_device_purchase_info_purchase_url_value"></td>
</tr>
<tr>
    <th>
        <input type="checkbox" id="mass_device_purchase_info_contact">
        <label for="mass_device_purchase_info_contact"><%= t('activeldap.attributes.device.puavoSupportContract') %>:</label>
    </th>
    <td><input type="text" id="mass_device_purchase_info_contact_value"></td>
</tr>
</table>
</form>`;

        // current form data
        this.data = {
            "purchaseDate": {
                checked: false,
                value: null
            },
            "purchaseWarranty": {
                "checked": false,
                "value": null
            },
            "purchaseLocation": {
                "checked": false,
                "value": null
            },
            "purchaseUrl": {
                "checked": false,
                "value": null
            },
            "purchaseSupport": {
                "checked": false,
                "value": null
            }
        };

        // setup event handling
        this.container.querySelector("#mass_device_purchase_info_purchase_date")
            .addEventListener("click", event => this.checkboxClicked(event, "purchaseDate"));

        this.container.querySelector("#mass_device_purchase_info_warranty_end_date")
            .addEventListener("click", event => this.checkboxClicked(event, "purchaseWarranty"));

        this.container.querySelector("#mass_device_purchase_info_purchase_location")
            .addEventListener("click", event => this.checkboxClicked(event, "purchaseLocation"));

        this.container.querySelector("#mass_device_purchase_info_purchase_url")
            .addEventListener("click", event => this.checkboxClicked(event, "purchaseUrl"));

        this.container.querySelector("#mass_device_purchase_info_contact")
            .addEventListener("click", event => this.checkboxClicked(event, "purchaseSupport"));

        this.container.querySelector("#mass_device_purchase_info_purchase_date_value")
            .addEventListener("input", event => this.dateChanged(event, "purchaseDate"));

        this.container.querySelector("#mass_device_purchase_info_warranty_end_date_value")
            .addEventListener("input", event => this.dateChanged(event, "purchaseWarranty"));

        this.container.querySelector("#mass_device_purchase_info_purchase_location_value")
            .addEventListener("input", event => this.textChanged(event, "purchaseLocation"));

        this.container.querySelector("#mass_device_purchase_info_purchase_url_value")
            .addEventListener("input", event => this.textChanged(event, "purchaseUrl"));

        this.container.querySelector("#mass_device_purchase_info_contact_value")
            .addEventListener("input", event => this.textChanged(event, "purchaseSupport"));
    }

    checkboxClicked(event, name)
    {
        this.data[name].checked = event.target.checked;
    }

    textChanged(event, name)
    {
        this.data[name].value = event.target.value.trim();

        if (this.data[name].value.length == 0)
            this.data[name].value = null;
    }

    dateChanged(event, name)
    {
        this.data[name].value = event.target.value;

        if (this.data[name].value.length == 0)
            this.data[name].value = null;
    }

    // I'm not sure if this function is really needed, but
    // JS's type coercions and comparisons are horrible and
    // I will not take any chances with them
    hasChanged(a, b)
    {
        let a2, b2;

        if (a === undefined || a === null || a == "")
            a2 = null;
        else a2 = a;

        if (b === undefined || b === null || b == "")
            b2 = null;
        else b2 = b;

        //console.log(`Comparing |${a2}| and |${b2}|`);
        return a2 !== b2;
    }

    processItem(item)
    {
        // gather up changed values
        let mustSendRequest = false;
        let params = {};

        if (this.data["purchaseDate"].checked) {
            const date = item.purchase_date ? convertTimestampDateOnly(item.purchase_date) : null;

            if (this.hasChanged(date, this.data["purchaseDate"].value)) {
                mustSendRequest = true;
                params.purchase_date = this.data["purchaseDate"].value;
            }
        }

        if (this.data["purchaseWarranty"].checked) {
            const date = item.purchase_warranty ? convertTimestampDateOnly(item.purchase_warranty) : null;

            if (this.hasChanged(date, this.data["purchaseWarranty"].value)) {
                mustSendRequest = true;
                params.purchase_warranty = this.data["purchaseWarranty"].value;
            }
        }

        if (this.data["purchaseLocation"].checked &&
            this.hasChanged(item.purchase_loc, this.data["purchaseLocation"].value)) {
            mustSendRequest = true;
            params.purchase_loc = this.data["purchaseLocation"].value;
        }

        if (this.data["purchaseUrl"].checked &&
            this.hasChanged(item.purchase_url, this.data["purchaseUrl"].value)) {
            mustSendRequest = true;
            params.purchase_url = this.data["purchaseUrl"].value;
        }

        if (this.data["purchaseSupport"].checked &&
            this.hasChanged(item.purchase_support, this.data["purchaseSupport"].value)) {
            mustSendRequest = true;
            params.purchase_support = this.data["purchaseSupport"].value;
        }

        if (!mustSendRequest) {
            // nothing actually changed (or nothing was checked?)
            return itemProcessedStatus(true);
        }

        //console.log(mustSendRequest, params);

        return doPOST(
            `/devices/${item.school_id}/mass_op_device_purchase_info`,
            {
                id: item.id[0],
                purchase_params: params
            }
        );
    }
};

class MassDevicePuavoconfEditor extends MassOperation {
    constructor(parent, container)
    {
        super(parent, container);
    }

    buildInterface()
    {
        this.container.innerHTML =
`<p><%= t('devices.index.mass_operations.puavoconf.json_warning').html_safe %></p>
<form>
<table class="settingsChild">
<tr>
    <th><label for="mass_device_pc_key"><%= t('devices.index.mass_operations.puavoconf.key') %></label></th>
    <td>
        <div class="mobileTitle"><%= t('devices.index.mass_operations.puavoconf.key') %></div>
        <input type="text" id="mass_device_pc_key" size="50">
    </td>
</tr>
<tr>
    <th><label for="mass_device_pc_value"><%= t('devices.index.mass_operations.puavoconf.value') %></label></th>
    <td>
        <div class="mobileTitle"><%= t('devices.index.mass_operations.puavoconf.value') %></div>
        <input type="text" id="mass_device_pc_value" size="50">
        <p class="validityWarning"><%= t('devices.index.mass_operations.puavoconf.validity_warning') %></p>
    </td>
</tr>
<tr>
    <th><%= t('devices.index.mass_operations.puavoconf.type') %></th>
    <td>
        <div class="mobileTitle"><%= t('devices.index.mass_operations.puavoconf.type') %></div>
        <input type="radio" name="mass_device_pc_type" id="mass_device_pc_type_string" checked>
        <label for="mass_device_pc_type_string"><%= t('devices.index.mass_operations.puavoconf.type_string') %></label>
        <input type="radio" name="mass_device_pc_type" id="mass_device_pc_type_int">
        <label for="mass_device_pc_type_int"><%= t('devices.index.mass_operations.puavoconf.type_int') %></label>
        <input type="radio" name="mass_device_pc_type" id="mass_device_pc_type_bool">
        <label for="mass_device_pc_type_bool"><%= t('devices.index.mass_operations.puavoconf.type_bool') %></label>
    </td>
</tr>
<tr>
    <th><%= t('devices.index.mass_operations.puavoconf.action') %></th>
    <td>
        <div class="mobileTitle"><%= t('devices.index.mass_operations.puavoconf.action') %></div>
        <input type="radio" name="mass_device_pc_action" id="mass_device_pc_action_add" checked>
        <label for="mass_device_pc_action_add"><%= t('devices.index.mass_operations.puavoconf.add') %></label><br>
        <input type="radio" name="mass_device_pc_action" id="mass_device_pc_action_remove">
        <label for="mass_device_pc_action_remove"><%= t('devices.index.mass_operations.puavoconf.remove') %></label>
    </td>
</tr>
</table>
</form>`;

        this.key = this.container.querySelector("#mass_device_pc_key");
        this.value = this.container.querySelector("#mass_device_pc_value");
        this.action = 0;
        this.type = "string";

        this.container.querySelector("#mass_device_pc_action_add")
            .addEventListener("click", event => this.setAction(event, 0));
        this.container.querySelector("#mass_device_pc_action_remove")
            .addEventListener("click", event => this.setAction(event, 1));

        this.container.querySelector("#mass_device_pc_type_string")
            .addEventListener("click", event => this.setType(event, "string"));
        this.container.querySelector("#mass_device_pc_type_int")
            .addEventListener("click", event => this.setType(event, "int"));
        this.container.querySelector("#mass_device_pc_type_bool")
            .addEventListener("click", event => this.setType(event, "bool"));
    }

    setAction(event, action)
    {
        this.action = action;
    }

    setType(event, type)
    {
        this.type = type;
    }

    canProceed()
    {
        if (this.key.value.length == 0 || this.key.value.trim().length == 0) {
            window.alert("<%= t('devices.index.mass_operations.puavoconf.empty_key') %>");
            return false;
        }

        return true;
    }

    processItem(item)
    {
        return doPOST(
            `/devices/${item.school_id}/mass_op_device_edit_puavoconf`,
            {
                id: item.id[0],
                key: this.key.value,
                value: this.value.value,
                type: this.type,
                action: this.action
            }
        );
    }
};

<% if @is_owner %>
class MassDeviceChangeSchool extends MassOperation {
    constructor(parent, container)
    {
        super(parent, container);
    }

    buildInterface()
    {
        this.container.innerHTML =
`<form>
<table class="settingsChild">
<tr>
    <th><label for="mass_device_change_school"><%= t('devices.index.mass_operations.change_school.school_title') %></label></th>
    <td>
        <div class="mobileTitle"><%= t('devices.index.mass_operations.change_school.school_title') %></div>
        <select id="mass_device_change_school">
<% @school_list.each do |s| %>
            <option data-dn="<%= s[0] %>"><%= s[1] %> (<%= s[2] %>)</option>
<% end%>
        </select>
    </td>
</tr>
</table>
</form>`;

        this.newSchoolDN = "<%= @school_list.first[0] %>";

        this.container.querySelector("#mass_device_change_school")
            .addEventListener("change", event => this.changeNewSchool(event));
    }

    changeNewSchool(event)
    {
        this.newSchoolDN = event.target.children[event.target.selectedIndex].dataset.dn;
    }

    processItem(item)
    {
        return doPOST(
            `/devices/${item.school_id}/mass_op_device_change_school`,
            {
                id: item.id[0],
                school_dn: this.newSchoolDN
            }
        );
    }
};
<% end %>

class MassDeviceDeletion extends MassOperation {
    constructor(parent, container)
    {
        super(parent, container);
    }

    processItem(item)
    {
        return doPOST(
            `/devices/${item.school_id}/mass_op_device_delete`,
            { id: item.id[0] }
        );
    }
};

const MASS_OPERATIONS = [
    {
        id: "set_field",
        title: "<%= t('devices.index.mass_operations.set_field.title') %>",
        flags: MassOperationFlags.HAVE_SETTINGS,
        cls: MassDeviceSetFieldValue
    },

    {
        id: "purchase_info",
        title: "<%= t('devices.index.mass_operations.purchase_info.title') %>",
        flags: MassOperationFlags.HAVE_SETTINGS,
        cls: MassDevicePurchaseInfo
    },

    {
        id: "puavoconf_edit",
        title: "<%= t('devices.index.mass_operations.puavoconf.title') %>",
        flags: MassOperationFlags.HAVE_SETTINGS,
        cls: MassDevicePuavoconfEditor
    },

<% if @is_owner %>
    {
        id: "change_school",
        title: "<%= t('devices.index.mass_operations.change_school.title') %>",
        flags: MassOperationFlags.HAVE_SETTINGS,
        cls: MassDeviceChangeSchool
    },
<% end %>

    {
        id: "delete",
        title: "<%= t('devices.index.mass_operations.delete.title') %>",
        cls: MassDeviceDeletion
    },
];

<% end %>

function userActions(item)
{
    let html = "";

<% if @is_servers %>
    const link = `/devices/servers/${item.id}`;
<% else %>
    const link = `/devices/${item.school_id}/devices/${item.id}`;
<% end %>

    html += `<a href="${link}/edit" class="btn"><%= t('link.edit') %></a> `;

    let message = "<%= t('general_confirm') %>";

    html += `<a href="${link}" data-method="delete" data-confirm="${message}" rel="nofollow" class="btn btn-danger"><%= t('link.destroy') %></a>`

    return html;
}
