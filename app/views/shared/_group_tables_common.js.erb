// Table column definitions
const COLUMN_DEFINITIONS = {
    abbr: {
        key: "abbr",
        type: ST.ColumnType.STRING,
    },

    created: {
        key: "created",
        type: ST.ColumnType.UNIXTIME,
        flags: ST.ColumnFlag.DESCENDING_DEFAULT,
    },

    eid: {
        key: "eid",
        type: ST.ColumnType.STRING,
    },

    id: {
        key: "id",
        type: ST.ColumnType.NUMERIC,
    },

    modified: {
        key: "modified",
        type: ST.ColumnType.UNIXTIME,
        flags: ST.ColumnFlag.DESCENDING_DEFAULT,
    },

    members_count: {
        key: "members_count",
        type: ST.ColumnType.NUMERIC,
    },

    name: {
        key: "name",
        type: ST.ColumnType.STRING,
        flags: ST.ColumnFlag.USER_TRANSFORM,
    },

<% if @is_organisation %>
    school: {
        key: "school",
        type: ST.ColumnType.STRING,
        flags: ST.ColumnFlag.USER_TRANSFORM,
    },
<% end %>

    type: {
        key: "type",
        type: ST.ColumnType.STRING,
        flags: ST.ColumnFlag.USER_TRANSFORM,
        missing: {
            display: `<span class="missingData"><%= t('missing_data') %></span>`,
            sort: "",
            filter: "",
        }
    },
};

// Localized column titles. The keys must be same as in the keys in the column
// definitions object above.
const COLUMN_TITLES = {
    abbr: "<%= t('columns.groups.abbreviation') %>",
    created: "<%= t('columns.created') %>",
    eid: "<%= t('columns.groups.eid') %>",
    id: "<%= t('columns.puavoid') %>",
    modified: "<%= t('columns.modified') %>",
    members_count: "<%= t('columns.groups.members_count') %>",
    name: "<%= t('columns.groups.name') %>",
<% if @is_organisation %>
    school: "<%= t('columns.school') %>",
<% end %>
    type: "<%= t('columns.groups.type') %>",
};

// Localized group types
const GROUP_TYPES = {
    "teaching group": "<%= t('group_type.teaching group') %>",
    "course group": "<%= t('group_type.course group') %>",
    "year class": "<%= t('group_type.year class') %>",
    "administrative group": "<%= t('group_type.administrative group') %>",
    "archive users": "<%= t('group_type.archive users') %>",
    "other groups": "<%= t('group_type.other groups') %>",
};

// The default order for columns. "DEFAULT_COLUMNS" above does not have to be in this order.
const COLUMN_ORDER = [
<% if @is_organisation %>
    "school",
<% end %>
    "id",
    "name",
    "abbr",
    "type",
    "members_count",
    "eid",
    "created",
    "modified",
];

const USER_TRANSFORM_FUNCTIONS = {
    name: function(entry) {
        return [
            `<a href="${entry.link}">${ST.escapeHTML(entry.name)}</a>`,
            entry.name
        ];
    },

    type: function(entry) {
        let type = null;

        if (entry.type in GROUP_TYPES) {
            type = GROUP_TYPES[entry.type];

            if (entry.type == 'course group')
                type = `<span class="stCourseGroup">${type}</span>`;
        } else {
            type = `<span class="missingData"><%= t('missing_data') %></span>`;
        }

        return [type, entry.type];
    },

    school: function(entry) {
        // Makes filtering by school name work as expected, but the exported CSV
        // will contain display names. Can't have everything.
        return [
            entry.school[1],
            entry.school[1]
        ];
    },
};

// Mass operation: remove all members from the group
class MassGroupRemoveMembers extends ST.MassOperation {
    constructor(parent, container) { super(parent, container); }
    prepareItem(item) { return { state: "ready" }; }
};

// Mass operation: lock all members
class MassGroupLockMembers extends ST.MassOperation {
    constructor(parent, container) { super(parent, container); }
    prepareItem(item) { return { state: "ready" }; }
};

// Mass operation: unlock all members
class MassGroupUnlockMembers extends ST.MassOperation {
    constructor(parent, container) { super(parent, container); }
    prepareItem(item) { return { state: "ready" }; }
};

// Mass operation: mark all members for deletion
class MassGroupMarkMembersForDeletion extends ST.MassOperation {
    constructor(parent, container) { super(parent, container); }
    prepareItem(item) { return { state: "ready" }; }
};

// Mass operation: remove member deletion marks
class MassGroupUnmarkMembersForDeletion extends ST.MassOperation {
    constructor(parent, container) { super(parent, container); }
    prepareItem(item) { return { state: "ready" }; }
};

// Mass operation: delete the group
class MassGroupDeletion extends ST.MassOperation {
    constructor(parent, container) { super(parent, container); }
    prepareItem(item) { return { state: "ready" }; }
};

// JavaScript class fields support is so poor that I can't really
// define titles, IDs and other things in classes, they must be here
const MASS_OPERATIONS = [
    {
        operation: "remove_members",
        title: "<%= t('link.remove_all_members_from_group') %>",
        cls: MassGroupRemoveMembers
    },
    {
        operation: "lock_members",
        title: "<%= t('link.lock_all_group_members') %>",
        cls: MassGroupLockMembers
    },
    {
        operation: "unlock_members",
        title: "<%= t('link.unlock_all_group_members') %>",
        cls: MassGroupUnlockMembers
    },
    {
        operation: "mark_members",
        title: "<%= t('link.mark_group_members_for_deletion') %>",
        cls: MassGroupMarkMembersForDeletion
    },
    {
        operation: "unmark_members",
        title: "<%= t('link.unmark_group_members_deletion') %>",
        cls: MassGroupUnmarkMembersForDeletion
    },
    {
        operation: "delete",
        title: "<%= t('link.delete_group') %>",
        cls: MassGroupDeletion
    },
];

function userActions(item)
{
    let html = "";

    const link = `/users/${item.school_id}/groups/${item.id[ST.INDEX_FILTERABLE]}`;

    html += `<a href="${link}/edit" class="btn"><%= t('link.edit') %></a> `;

    let message = "<%= t('general_confirm') %>";

    html += `<a href="${link}" data-method="delete" data-confirm="${message}" rel="nofollow" class="btn btn-danger"><%= t('link.destroy') %></a>`

    return html;
}

function openCallback(item)
{
    return `/users/${item.school_id}/groups/${item.id[ST.INDEX_DISPLAYABLE]}`;
}

const MASS_SELECTS = [
    ["name", "<%= t('columns.groups.name') %>"],
    ["abbr", "<%= t('columns.groups.abbreviation') %>"],
    ["eid", "<%= t('columns.groups.eid') %>"],
    ["id", "<%= t('columns.puavoid') %>"],
];
